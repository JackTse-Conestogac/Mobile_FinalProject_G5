import 'dart:convert';

import 'package:coffee_meet_app/screens/tab_List_screen.dart';
import 'package:flutter/material.dart';
import 'package:shared_preferences/shared_preferences.dart';
import '../entities/User.dart';
import '../managers/user_local_storage_manager.dart';
import '../managers/user_manager.dart';
import "logIn_screen.dart";

class CreateUserScreen extends StatefulWidget {
  const CreateUserScreen({super.key});

  @override
  State<CreateUserScreen> createState() => _CreateUserScreenState();
}

class _CreateUserScreenState extends State<CreateUserScreen> {
  final _formKey = GlobalKey<FormState>();
  final TextEditingController _nameController = TextEditingController();
  final TextEditingController _passwordController = TextEditingController();
  final TextEditingController _emailController = TextEditingController();
  final TextEditingController _phoneController = TextEditingController();
  final TextEditingController _occupationController = TextEditingController();
  final TextEditingController _facebookController = TextEditingController();
  final TextEditingController _linkedinController = TextEditingController();

  bool _isSaved = false;
  bool _showSocialMediaIcon = false;
  bool _isAvailable = false;
  String? _emailError;
  String? _nameError;
  String? _passwordError;
  String? _occupationError;

  final UserManager _userManager = UserManager();

  // Email validation
  Future<String?> _isValidEmail(String? value) async {
    if (value == null || value.isEmpty) {
      return 'Email is required';
    }
    final emailRegex = RegExp(r'^[^@\s]+@[^@\s]+\.[^@\s]+$');
    if (!emailRegex.hasMatch(value)) {
      return 'Enter a valid email';
    }
    // Check if the email is available
    final isAvailable = !await _userManager.checkEmail(value);
    if (!isAvailable) {
      return 'Email already exists';
    }
    return null; // Email is valid
  }

  // Name validation
  Future<String?> _isValidName(String? value) async {
    if (value == null || value.isEmpty) {
      return 'Name is required';
    }
    return null; // Name is valid
  }

  // Password validation
  Future<String?> _isValidPassword(String? value) async {
    if (value == null || value.isEmpty) {
      return 'Password is required';
    }

    return null;
  }

  // Occupation validation
  Future<String?> _isValidOccupation(String? value) async {
    if (value == null || value.isEmpty) {
      return 'Occupation is required';
    }
    return null;
  }

  Future<void> _saveProfile() async {
    // Perform asynchronous validation for all fields
    final emailValidation = await _isValidEmail(_emailController.text);
    final nameValidation = await _isValidName(_nameController.text);
    final passwordValidation = await _isValidPassword(_passwordController.text);
    final occupationValidation =
    await _isValidOccupation(_occupationController.text);

    setState(() {
      _emailError = emailValidation;
      _nameError = nameValidation;
      _passwordError = passwordValidation;
      _occupationError = occupationValidation;
    });

    // Check if any validation failed
    if (emailValidation != null ||
        nameValidation != null ||
        passwordValidation != null ||
        occupationValidation != null) {
      return; // Stop processing if any validation fails
    }

    try {
      User _user = User(
        id: 0, // ID will be generated by the system
        name: _nameController.text,
        password: _passwordController.text,
        email: _emailController.text,
        phone: int.tryParse(_phoneController.text) ?? 0,
        occupation: _occupationController.text,
        facebookUrl: _facebookController.text,
        linkedInUrl: _linkedinController.text,
        showSocialMedia: _showSocialMediaIcon,
        isAvailable: _isAvailable,
      );

      await _userManager.addUser(_user);

      setState(() {
        _isSaved = true;
      });

      // Navigate back on success after a short delay
      Future.delayed(Duration(seconds: 1), () {
        Navigator.pop(context, true);
      });
    } catch (e) {
      setState(() {
        _emailError = e.toString();
      });
    }
  }

  @override
  void dispose() {
    // Dispose controllers to free up resources
    _nameController.dispose();
    _passwordController.dispose();
    _emailController.dispose();
    _phoneController.dispose();
    _occupationController.dispose();
    _facebookController.dispose();
    _linkedinController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Create profile'),
      ),
      body: ListView(
        padding: EdgeInsets.all(10),
        children: [
          const Text(
            'Name:',
            style: TextStyle(fontSize: 15),
          ),
          const SizedBox(height: 5),
          TextField(
            controller: _nameController,
            decoration: InputDecoration(
              hintText: 'Required',
              border: OutlineInputBorder(),
              errorText: _nameError,
            ),
          ),
          const SizedBox(height: 10),
          const Text(
            'Password:',
            style: TextStyle(fontSize: 15),
          ),
          const SizedBox(height: 5),
          TextField(
            controller: _passwordController,
            decoration: InputDecoration(
              hintText: 'Required',
              border: OutlineInputBorder(),
              errorText: _passwordError,
            ),
            obscureText: true,
          ),
          const SizedBox(height: 10),
          const Text(
            'Phone:',
            style: TextStyle(fontSize: 15),
          ),
          const SizedBox(height: 5),
          TextField(
            controller: _phoneController,
            decoration: const InputDecoration(
              hintText: 'Optional',
              border: OutlineInputBorder(),
            ),
            keyboardType: TextInputType.phone,
          ),
          const SizedBox(height: 10),
          const Text(
            'Email:',
            style: TextStyle(fontSize: 15),
          ),
          const SizedBox(height: 5),
          TextField(
            controller: _emailController,
            decoration: InputDecoration(
              hintText: 'Required',
              border: const OutlineInputBorder(),
              errorText: _emailError,
            ),
          ),
          const SizedBox(height: 10),
          const Text(
            'Occupation:',
            style: TextStyle(fontSize: 15),
          ),
          const SizedBox(height: 5),
          TextField(
            controller: _occupationController,
            decoration: InputDecoration(
              hintText: 'Required',
              border: OutlineInputBorder(),
              errorText: _occupationError,
            ),
          ),
          const SizedBox(height: 10),
          const Text(
            'Facebook:',
            style: TextStyle(fontSize: 15),
          ),
          const SizedBox(height: 5),
          TextField(
            controller: _facebookController,
            decoration: const InputDecoration(
              hintText: 'Optional',
              border: OutlineInputBorder(),
            ),
            keyboardType: TextInputType.url,
          ),
          const SizedBox(height: 10),
          const Text(
            'LinkedIn:',
            style: TextStyle(fontSize: 15),
          ),
          const SizedBox(height: 5),
          TextField(
            controller: _linkedinController,
            decoration: const InputDecoration(
              hintText: 'Optional',
              border: OutlineInputBorder(),
            ),
            keyboardType: TextInputType.url,
          ),
          const SizedBox(height: 10),
          CheckboxListTile(
            title: const Text(
              'Show Social Media Icon',
              style: TextStyle(fontSize: 20),
            ),
            value: _showSocialMediaIcon,
            onChanged: (value) {
              setState(() {
                _showSocialMediaIcon = value ?? false;
              });
            },
          ),
          CheckboxListTile(
            title: const Text(
              'Availableï¼Ÿ',
              style: TextStyle(fontSize: 20),
            ),
            value: _isAvailable,
            onChanged: (value) {
              setState(() {
                _isAvailable = value ?? false;
              });
            },
          ),
          const SizedBox(height: 15),
          Center(
            child: ElevatedButton(
              onPressed: _saveProfile,
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.purple,
                foregroundColor: Colors.white,
                textStyle: TextStyle(fontSize: 20),
              ),
              child: const Text('Save'),
            ),
          ),
          if (_isSaved)
            const Padding(
              padding: EdgeInsets.only(top: 16.0),
              child: Center(
                child: Text(
                  'Profile has been saved successfully!',
                  style: TextStyle(color: Colors.green),
                ),
              ),
            ),
        ],
      ),
    );
  }
}
